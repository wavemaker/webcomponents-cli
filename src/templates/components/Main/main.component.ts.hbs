import { Component, Inject, Injector, ViewEncapsulation, DoCheck, NgZone, ElementRef, AfterViewInit, ViewChild  } from '@angular/core';

import { $invokeWatchers, setNgZone, setPipeProvider, UserDefinedExecutionContext } from '@wm/core';
import { PrefabDirective } from '@wm/components/prefab';

import { initScript } from './{{name}}.component.script';
import { getVariables } from './{{name}}.component.variables';
import { expressionData } from './{{name}}.component.expressions';

import { AppRef, {{#if enableSpa}}BaseSpaPageComponent{{else}}BasePageComponent{{/if}} } from '@wm/runtime/base';
import { PipeProvider } from '@wm/runtime/base';
import { setTheme } from 'ngx-bootstrap/utils';

@Component({
    selector: 'app-page-{{name}}',
    templateUrl: './{{name}}.component.html',
    styleUrls: ['./{{name}}.component.css'],
    encapsulation: ViewEncapsulation.None,
    providers: [
        {
            provide: UserDefinedExecutionContext,
            useExisting: {{componentName}}
        }
    ]
})
export class {{componentName}} extends {{#if enableSpa}}BaseSpaPageComponent{{else}}BasePageComponent{{/if}} implements DoCheck {

    override pageName = '{{name}}';
    [key: string]: any;
    @ViewChild(PrefabDirective) prefabDirective;

    constructor(@Inject(NgZone) ngZone: NgZone, _pipeProvider: PipeProvider, private elementRef: ElementRef) {
        super();
        super.init();
    }

    ngAfterViewInit() {
        if(this.prefabDirective) {
            this.bindFnsToPrefab();
        }

        // @ts-ignore
        if(super.ngAfterViewInit) {
            // @ts-ignore
            super.ngAfterViewInit();
        }
    }

    bindFnsToPrefab() {
        // const wcAttributes = this.elementRef.nativeElement.attributes;
        const prefabEle = this.prefabDirective.nativeElement;
        const wcAttributes = prefabEle.attributes;
        // console.log("==========prefabEle===========", prefabEle)
        for (let i = 0; i < wcAttributes.length; i++) {
            const attribute = wcAttributes[i];
            let attrName = attribute.name,
            attrVal = attribute.value;
            if (attrVal.indexOf("(") !== -1) {
                let fn = attrVal,
                fnName = fn.substring(0, attrVal.indexOf("("));
                // console.log("--============fnName-===========", fnName);
                let eventName = attrName.substring(0, attrName.indexOf("."));
                eventName = eventName.charAt(0).toUpperCase() + eventName.slice(1);
                eventName = "on"+ eventName;
                // if(this.prefabDirective[eventName]) {
                //    this.prefabDirective[eventName] = window[fnName];
                // }
                // @ts-ignore
                this[eventName] = window[fnName];
                // @ts-ignore
                this[fnName] = window[fnName];
            }
        }
    }

    getVariables() {
        return getVariables();
    }

    evalUserScript(Page, App, Utils) {
        initScript(Page, App, Utils);
    }

    getExpressions() {
        return expressionData;
    }

    ngDoCheck() {
        $invokeWatchers(true);
    }
}
