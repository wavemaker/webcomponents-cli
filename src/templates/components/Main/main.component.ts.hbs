import { Component, Inject, Injector, ViewEncapsulation, DoCheck, NgZone, ElementRef, AfterViewInit, ViewChild  } from '@angular/core';

import { $invokeWatchers, setNgZone, setPipeProvider, UserDefinedExecutionContext } from '@wm/core';
import { PrefabDirective } from '@wm/components/prefab';

import { initScript } from './{{name}}.component.script';
import { getVariables } from './{{name}}.component.variables';
import { expressionData } from './{{name}}.component.expressions';

import { AppRef, {{#if enableSpa}}BaseSpaPageComponent{{else}}BasePageComponent{{/if}} } from '@wm/runtime/base';
import { PipeProvider } from '@wm/runtime/base';
import { setTheme } from 'ngx-bootstrap/utils';

@Component({
    selector: 'app-page-{{name}}',
    templateUrl: './{{name}}.component.html',
    styleUrls: ['./{{name}}.component.css'],
    encapsulation: ViewEncapsulation.None,
    providers: [
        {
            provide: UserDefinedExecutionContext,
            useExisting: {{componentName}}
        }
    ]
})
export class {{componentName}} extends {{#if enableSpa}}BaseSpaPageComponent{{else}}BasePageComponent{{/if}} implements DoCheck {

    override pageName = '{{name}}';
    [key: string]: any;
    @ViewChild(PrefabDirective) prefabDirective;

    constructor(@Inject(NgZone) ngZone: NgZone, _pipeProvider: PipeProvider, private elementRef: ElementRef) {
        super();
        super.init();
    }

    ngAfterViewInit() {
        // @ts-ignore
        if(super.ngAfterViewInit) {
            // @ts-ignore
            super.ngAfterViewInit();
        }
    }

    getVariables() {
        return getVariables();
    }

    evalUserScript(Page, App, Utils) {
        initScript(Page, App, Utils);
    }

    getExpressions() {
        return expressionData;
    }

    ngDoCheck() {
        $invokeWatchers(true);
    }
}
