import { Injector, Injectable, DoBootstrap, InjectionToken } from '@angular/core';
import { APP_BASE_HREF } from '@angular/common';
import { HttpInterceptor, HttpRequest, HttpResponse, HttpHandler, HttpEvent, HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import  { createCustomElement } from '@angular/elements';
{{{componentImports}}}
import { APP_INITIALIZER } from '@angular/core';
import { AppCodeGenModule } from './app-codegen.module';
import { _WM_APP_PROJECT } from '@wm/core';

export const PREFAB_NAME = new InjectionToken<string>('Prefab Name');

export function initMetadata(appName) {
    return () => {
        try {
            //@ts-ignore
            downloadPrefabsScripts();
        }catch(e) {
            //no prefabs present. just ignore the error
        }
        _WM_APP_PROJECT.isPreview = false;

        const scriptSelector = `script[src*="bootstrap-${appName}.js"]`;
		const currentScript = document.querySelector(scriptSelector);
        let baseAPIUrl;
        if (currentScript) {
            if(currentScript.getAttribute('data-api-url')){
                //@ts-ignore
                baseAPIUrl =  _WM_APP_PROJECT.apiUrl = WM_APPS_META[appName].apiUrl;
            } else {
                //@ts-ignore
                baseAPIUrl =  _WM_APP_PROJECT.apiUrl = WM_APPS_META[appName].apiUrl = AppProperties["app.apiUrl"];
            }
        }
       
        //@ts-ignore
        let artifactsUrl = WM_APPS_META[appName].artifactsUrl;
        //@ts-ignore
        __webpack_require__.p = __webpack_public_path__ = _WM_APP_PROJECT.cdnUrl = artifactsUrl || '/ng-bundle/';
    };
}

export const AppProperties = {{{appProperties}}}