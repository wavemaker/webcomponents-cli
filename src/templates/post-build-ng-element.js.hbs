const fsextra = require('fs-extra');
const concat = require('concat');
const fs = require('fs');
const path = require('path');
const appName = process.argv[2].split("=")[1];

(async function postBuild() {
    const deleteUnusedLocaleFiles = async () => {
        let localeDirs = ['./dist/ng-bundle/locales/angular/global'];
        let allowedLocales = {{{supportedLanguages}}};

        const deleteLocaleFiles = (localeDir) => {
            const files = fs.readdirSync(localeDir);

            files.forEach(localeFileName => {
                if(!allowedLocales.includes(localeFileName)) {
                    const fullPath = path.join(path.resolve(localeDir), localeFileName);
                    // delete the file if it is not from the above allowed array
                    fs.unlinkSync(fullPath);
                }
            });
        }

        localeDirs.forEach((localeDir) => {
            try {
                deleteLocaleFiles(localeDir);
            } catch(e) {
                console.log(`Something went wrong while deleting ${localeDir} folder`);
            }
        });
    };

    const deleteDuplicateResources = async () => {
        const basePath = './dist/ng-bundle/resources';
        const targetsToDelete = [
            'bootstrap',
            'docs',
            'prefabs',
            'servicedefs',
            'favicon.png',
            'font.config.js'
        ];

        for (const target of targetsToDelete) {
            const fullPath = path.join(basePath, target);
            try {
                if (fs.existsSync(fullPath)) {
                    await fsextra.remove(fullPath);
                    console.log(`Deleted: ${fullPath}`);
                } else {
                    console.log(`Not found: ${fullPath}`);
                }
            } catch (err) {
                console.error(`Failed to delete ${fullPath}:`, err);
            }
        }
    }

    await deleteUnusedLocaleFiles();
    await deleteDuplicateResources();

})();
