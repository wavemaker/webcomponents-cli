
    const tagName = "wm-" + Prefab.prefabName.toLowerCase();

    const targetNode = document.querySelector(tagName);

    const prefabActions = Prefab.prefabMngr.prefabConfigProvider.getConfig(`${Prefab.prefabName}`).__zone_symbol__value;
    var events = {};
    var methods = {};
    var properties = {};

        
    if(prefabActions.methods !== undefined){
        methods = Object.keys(prefabActions.methods);

        methods.forEach( method => {
            Object.defineProperty( targetNode, method, {
                get () {
                    return Prefab[method];
                }
            } )
        } )
    }

    if(prefabActions.properties !== undefined){
        properties = Object.keys(prefabActions.properties);

        properties.forEach(property=>{
            Object.defineProperty( targetNode, property, {
                get (){
                    return Prefab[property];
                },
                set (value) {
                    Prefab[property] = value
                }
            });
        });
    }  

    
    //events
    if(prefabActions.events !== undefined) {
        const originalAddEventListener = targetNode.addEventListener;
        events = Object.keys(prefabActions.events);
    
        targetNode.addEventListener = function(type, listener, options) {
            const eventName = `on${type}`;
    
            if(type==='load' || type==='Load'){
                Prefab.viewParent['onLoadCallBack'] = listener;
                return;
            }
    
            if(type==='destroy' || type==='Destroy'){
                Prefab.viewParent['onDestroyCallBack'] = listener;
                return;
            }
    
            if (!events.includes(eventName)) {
                originalAddEventListener.call(this, type, listener, options);
            } else{
                Prefab[`${eventName}`] = listener;
            }
        };
    }

    let wcAppName = Prefab.prefabName.toLowerCase();

    const observer = new MutationObserver((mutations) => {

        // Iterate over all mutations to check for image src changes
        mutations.forEach((mutation) => {
            if (mutation.type === 'attributes' && mutation.attributeName === 'src') {
                const imgElement = mutation.target ;
                let currentSrc = imgElement.getAttribute('src');
                let isRelativeUrl = false;
                if (currentSrc) {
                    try {
                        const url = new URL(currentSrc);
                        if (url.protocol === 'http:' || url.protocol === 'https:') {
                            // Skip updating if it's an absolute URL
                            return;
                        }
                    } catch (e) {
                        // If URL constructor throws, it means currentSrc is relative
                        isRelativeUrl = true;
                    }
                    if(isRelativeUrl) {
                        //@ts-ignore
                        const componentBaseUrl = WM_APPS_META[wcAppName].artifactsUrl;
                        currentSrc = currentSrc.replace("app/prefabs/", 'resources/');
                        const resolvedSrc = new URL(currentSrc, componentBaseUrl).href;

                        // Avoid re-triggering observer by temporarily disconnecting it
                        observer.disconnect();

                        imgElement.setAttribute('src', resolvedSrc);
                        // Reconnect the observer after updating the src
                        observer.observe(document.body, {
                            childList: true,
                            subtree: true,
                            attributes: true
                        });
                    }
                }
            }

            // Handle <wm-prefab> existing attributes
            if (mutation.type === 'childList') {
                mutation.addedNodes.forEach((node) => {
                    if (node instanceof HTMLElement) {
                        const prefabChild = node.querySelector('[wmprefab]') ;
                        if (prefabChild) {
                            handleWmPrefabChild(prefabChild);
                        }
                        // If the added node itself has `wmprefab`
                        if (node instanceof HTMLElement && node.hasAttribute('wmprefab')) {
                            handleWmPrefabChild(node);
                        }
                    }
                });
            }

            // Handle dynamically added attributes on <wm-prefab>
            if (mutation.type === 'attributes' && mutation.target instanceof HTMLElement) {
                const prefabElement = mutation.target ;
                if (prefabElement.tagName.toLowerCase() === `wm-${wcAppName}`) {
                    const wmPrefabElement = prefabElement.querySelector('[wmprefab]') ;
                    let attrName = mutation.attributeName;
                    if(attrName.indexOf('data-processed') === -1) {
                        const newValue = mutation.target.getAttribute(attrName);
                        wmPrefabElement.setAttribute(attrName, newValue);
                        Prefab[attrName] = newValue;
                    }
                }
            }
        });
    });

    // Function to handle elements with `wmprefab` attribute
    function handleWmPrefabChild(wmprefabElement) {
        let prefabElement = document.querySelector(`wm-${wcAppName}`);
        if (!prefabElement) return;

        transferAttributes(prefabElement, wmprefabElement);
        // Avoid duplicate processing
        //@ts-ignore
        if (prefabElement.dataset.processed === 'true') {
            return;
        }

        // wmprefabElement.outerHTML = wmprefabElement.outerHTML;
        // Mark this element as processed
        //@ts-ignore
        prefabElement.dataset.processed = 'true';
    }

    function transferAttributes(prefabElement, wmprefabAttrElement) {
        // Move attributes from <wm-app> to the child with `wmprefab`
        Array.from(prefabElement.attributes).forEach((attr) => {
            let attrName = attr.name;
            if (attrName.startsWith("on") ) {
                attrName = (attrName).substring(2).toLowerCase() + ".event";
            } 

            if (!wmprefabAttrElement.hasAttribute(attrName)) {
                wmprefabAttrElement.setAttribute(attrName, attr.value);
            }
        });
    }

    // Configure the observer to watch for DOM changes
    observer.observe(document.body, {
        childList: true,
        subtree: true,
        attributes: true
    });


    let loadEventAttr = false;
    let destroyEventAttr = false;

    function bindFnsToPrefab() {
        const prefabEle = document.querySelector(`[name="${Prefab.prefabName}"]`);
        const wcAttributes = prefabEle.attributes;
        for (let i = 0; i < wcAttributes.length; i++) {
            const attribute = wcAttributes[i];
            let attrName = attribute.name,
            attrVal = attribute.value;
            if (attrVal.indexOf("(") !== -1) {
                let fn = attrVal,
                fnName = fn.substring(0, attrVal.indexOf("("));
                var eventName = ""
                if(attrName.startsWith("on")){
                    eventName = attrName.slice(0,2) + attrName.charAt(2).toUpperCase() + attrName.slice(3) ;
                }

                if (attrName==='load.event'){
                    loadEventAttr = true;
                    
                    prefabEle.setAttribute('load.event', 'onLoadCallBack($event)');
                    Prefab.viewParent['onLoadCallBack'] = window[fnName];
                } else if (attrName==='destroy.event'){
                    // const onDestroyCallBack = window[fnName];
                    
                    prefabEle.setAttribute('destroy.event', 'onDestroyCallBack($event)');
                    Prefab.viewParent['onDestroyCallBack'] = window[fnName];
                    destroyEventAttr = true;
                } else {
                    Prefab.viewParent[`${fnName}`] = window[fnName];
                }
            }
        }

        if(!loadEventAttr){
            prefabEle.setAttribute('load.event', 'onLoadCallBack($event)');
        }
        if(!destroyEventAttr){
            prefabEle.setAttribute('destroy.event', 'onDestroyCallBack($event)');
        }
    }

    const element = document.querySelector(`[name="${Prefab.prefabName}"]`)
    handleWmPrefabChild(element);
    
    bindFnsToPrefab();
