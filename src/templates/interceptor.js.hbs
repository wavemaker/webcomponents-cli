@Injectable()
export class WMInterceptor implements HttpInterceptor {

    WM_REDIRECTS = [
        "services",
        "/services",
        "j_spring_security_check",
        "/j_spring_security_check",
        "j_spring_security_logout",
        "/j_spring_security_logout"
    ];

    intercept(request:HttpRequest<any>, next:HttpHandler):Observable<HttpEvent<any>> {
        console.log("WM_WEBCOMPONENT_CLI | REQUEST | "+request.url);

        let redirectToWm = this.WM_REDIRECTS.some((url)=>request.url.startsWith(url));
        let isPathMappingReq = request.url.indexOf("path_mapping.json") !== -1;
        let isPrefabReq = request.url.indexOf("/prefabs/") !== -1;
        const isAbsoluteUrl = (url) => {
                return /^[a-z][a-z0-9+.-]*:\/\//i.test(url);
        }

        //@ts-ignore
        let apiUrl = WM_APPS_META["{{appName}}"].apiUrl, artifactsUrl = WM_APPS_META["{{appName}}"].artifactsUrl;
        if (!redirectToWm) {
            if(!isAbsoluteUrl(request.url) && isPrefabReq) {
                request = request.clone({url:apiUrl+request.url});
            }
        } else {
            let fileUrl = request.url.split("/")[1];
            artifactsUrl = (artifactsUrl.slice(-1) === "/" ? artifactsUrl.slice(0, -1) : artifactsUrl);
            let reqUrl = artifactsUrl+'/'+fileUrl;
            request = request.clone({ url: reqUrl });
        }
        if (isPathMappingReq) {
            //just return empty data for path_mapping json request as all the files are
            // already merged into scripts.js
            return new Observable(observer => {
                observer.next(new HttpResponse({ status: 200, body: {} }));
                observer.complete();
            });
        }

        return next.handle(request);
    }
}

import { Router, NavigationStart } from '@angular/router';

@Injectable({
    providedIn: 'root',
})
export class SkipLocationChangeService {
    private isNavigatingWithSkipLocationChange = false;

    constructor(private router: Router) {}

    init() {
        this.router.events.subscribe(event => {
            if (event instanceof NavigationStart) {
                if (!this.isNavigatingWithSkipLocationChange) {
                    // Set the flag to prevent infinite loops
                    this.isNavigatingWithSkipLocationChange = true;
                    // Navigate with skipLocationChange
                    const isPrefab = {{isPrefab}} ;

                    if(isPrefab){
                        this.router.navigateByUrl(event.url, { skipLocationChange: {{isPrefab}} });
                    } else {
                        //state-intercepted to detect route changes from parentApp
                        this.router.navigateByUrl(event.url, { skipLocationChange: {{isPrefab}}, state: { customIntercepted: true } });
                    }

                } else {
                    // Reset the flag after the navigation completes
                    this.isNavigatingWithSkipLocationChange = false;
                }
            }
        });
    }
}

export function initializeSkipLocationChange(service: SkipLocationChangeService) {
    return () => service.init();
}

import { CanComponentDeactivate } from "@wm/runtime/base";
import { RouterStateSnapshot, ActivatedRouteSnapshot} from "@angular/router";

// component passing through routegarud is cached and passed when navigated from not a webcomponent page to webcomponent page
let lastComp;

// acts as interceptor for CanDeactivateNgPageGuard route gaurd
@Injectable()
export class CustomCanDeactivateGuard extends CanDeactivateNgPageGuard {

    override canDeactivate(
        component: CanComponentDeactivate,
        currentRoute?: ActivatedRouteSnapshot,
        currentState?: RouterStateSnapshot,
        nextState?: RouterStateSnapshot
    ): boolean | Observable<boolean> | Promise<boolean> {
        
        const nextRoute = nextState?.url;
        if (component) {
            lastComp = component;
            return super.canDeactivate(component, currentRoute, currentState, nextState);
        }
        
        if (lastComp !== undefined) {
            return super.canDeactivate(lastComp, currentRoute, currentState, nextState);
        }

        lastComp = new currentRoute.component()
        return super.canDeactivate(lastComp, currentRoute, currentState, nextState);
    }
}