@Injectable()
export class WMInterceptor implements HttpInterceptor {

    WM_REDIRECTS = [
        "/services",
        "/prefabs",
        "/resources",
        "resources/",
        "./services/",
        "./prefabs/",
        "ng-bundle",
        "j_spring_security_check",
        "/j_spring_security_check"
    ];

    intercept(request:HttpRequest<any>, next:HttpHandler):Observable<HttpEvent<any>> {
        console.log("WM_WEBCOMPONENT_CLI | REQUEST | "+request.url);

        let redirectToWm = this.WM_REDIRECTS.some((url)=>request.url.startsWith(url));
        let isPathMappingReq = request.url.indexOf("path_mapping.json") !== -1;
        let isi18nReq = request.url.indexOf("resources/i18n") !== -1;
        let servicedefsReq = request.url.indexOf("servicedefs") !== -1;
        let infoReq = request.url.indexOf("info") !== -1;

        //@ts-ignore
        let apiUrl = WM_APPS_META["{{appName}}"].apiUrl, artifactsUrl = WM_APPS_META["{{appName}}"].artifactsUrl;
        if (redirectToWm) {
            if(isi18nReq || servicedefsReq || infoReq) {
                let fileName = request.url.split("/").pop();
                if(fileName === "servicedefs") {
                    fileName = "app-servicedefs.json";
                    let prefabNameRegex = request.url.match(/services\/prefabs\/([^/]+)\/servicedefs/);
                    if(prefabNameRegex) {
                        fileName = "app-prefabs-"+prefabNameRegex[1]+"-servicedefs.json"
                    }
                }
                if(fileName === "info") {
                    fileName = "info.json";
                }
                artifactsUrl = (artifactsUrl.slice(-1) === "/" ? artifactsUrl.slice(0, -1) : artifactsUrl)
                request = request.clone({ url: artifactsUrl+'/'+fileName });
            } else {
                apiUrl = (apiUrl.slice(-1) === "/" ? apiUrl.slice(0, -1) : apiUrl)
                request = request.clone({url:apiUrl+'/'+request.url});
            }
        }
        if (isPathMappingReq) {
            //just return empty data for path_mapping json request as all the files are
            // already merged into scripts.js
            return new Observable(observer => {
                observer.next(new HttpResponse({ status: 200, body: {} }));
                observer.complete();
            });
        }

        return next.handle(request);
    }
}

import { Router, NavigationStart } from '@angular/router';

@Injectable({
    providedIn: 'root',
})
export class SkipLocationChangeService {
    private isNavigatingWithSkipLocationChange = false;

    constructor(private router: Router) {}

    init() {
        this.router.events.subscribe(event => {
            if (event instanceof NavigationStart) {
                if (!this.isNavigatingWithSkipLocationChange) {
                    // Set the flag to prevent infinite loops
                    this.isNavigatingWithSkipLocationChange = true;
                    // Navigate with skipLocationChange
                    this.router.navigateByUrl(event.url, { skipLocationChange: true });
                } else {
                    // Reset the flag after the navigation completes
                    this.isNavigatingWithSkipLocationChange = false;
                }
            }
        });
    }
}

export function initializeSkipLocationChange(service: SkipLocationChangeService) {
    return () => service.init();
}
