(function(appName) {
	function getRuntimeUrl(aName) {
		const scriptSelector = `script[src*="bootstrap-${aName}.js"]`;
		const scriptElement = document.querySelector(scriptSelector);

		if (scriptElement) {
			const scriptSrc = scriptElement.src;
			// Check if the URL is relative
			if (!/^(http:|https:|\/\/)/i.test(scriptSrc)) {
				// Resolve the relative URL using the document's location
				const parentUrl = window.location.href;
				const parentBasePath = parentUrl.substring(0, parentUrl.lastIndexOf('/') + 1);
				return new URL(scriptSrc, parentBasePath).href;
			}
			// If the URL is absolute, extract the base path
			const basePath = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);
			return basePath;
		}
		// Fallback path if the script element is not found
		return '/ng-bundle/';
	}

	function getWebComponentConfig() {
		const currentScript = document.currentScript;
		let artifactsUrl = getRuntimeUrl(appName);
		if (currentScript) {
			let apiUrl = currentScript.getAttribute('data-api-url');
			if(!apiUrl) {
				apiUrl = artifactsUrl;
			}
			return {
				apiUrl: apiUrl,
				artifactsUrl: artifactsUrl
			};
		}
	}

	// Dynamic script loader utility
	function loadScript(src, isModule) {
		return new Promise((resolve, reject) => {
			const script = document.createElement('script');
			script.src = src;
			if(isModule) {
				script.type = 'module';
			}
			script.src = src;
			script.onload = resolve;
			script.onerror = reject;
			document.body.appendChild(script);
		});
	}

    window.WM_APPS_META = window.WM_APPS_META || {};
    window.WM_APPS_META[appName] = getWebComponentConfig();
    let baseUrl = window.WM_APPS_META[`${appName}`]['artifactsUrl'];

    (function() {
      const loadScript = (src) => {
        return new Promise((resolve, reject) => {
          const script = document.createElement('script');
          script.src = `${baseUrl}${src}`;
          script.onload = resolve;
          script.onerror = reject;
          document.head.appendChild(script);
        });
      };

        const mountStyle = (styleSheetUrl) => {
            var head = document.getElementsByTagName('head')[0];
            //@ts-ignore
            if ([...head.querySelectorAll('link[rel="stylesheet"]')].some(link => link.href && link.href.includes(styleSheetUrl))) {
                //already present. just ignore
                return;
            }
            var link  = document.createElement('link');
            link.rel  = 'stylesheet';
            link.type = 'text/css';
            link.href = styleSheetUrl;
            link.media = 'all';
            head.appendChild(link);
        }

      const loadAngularAppDeps = async () => {
        try {
          await loadScript('scripts.js');
          await loadScript('bootstrap.main.js');
        } catch (error) {
          console.error('Failed to load Angular application:', error);
        }
      };

        const mountStyles = () => {
            let styles= ["styles.css"];
            styles.map(function(stylesheet) {
                //@ts-ignore
                let artifactsUrl = WM_APPS_META[appName].artifactsUrl;
                artifactsUrl = (artifactsUrl.slice(-1) === "/" ? artifactsUrl.slice(0, -1) : artifactsUrl)
                mountStyle(artifactsUrl + '/' + stylesheet);
            });
        }

        mountStyles();
        loadAngularAppDeps();
	 })()

})('{{appName}}');
