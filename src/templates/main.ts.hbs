import { ApplicationRef, enableProdMode, NgModuleRef } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { Router } from '@angular/router';

import { AppModule } from './app/app.module';
import { environment } from './environments/environment';

import initWmProjectProperties from './app/wm-project-properties';

initWmProjectProperties();

if (environment.production) {
    enableProdMode();
}

let wcAppName = '';

{{{mountStyles}}}

document.addEventListener('DOMContentLoaded', () => {
new Promise<Event | void>( resolve => {
    if (window['cordova']) {
        document.addEventListener('deviceready', resolve);
    } else {
        resolve();
    }
    }).then(() => platformBrowserDynamic().bootstrapModule(AppModule))
    .then((appModuleRef: NgModuleRef<AppModule>) => {
        //default page to be rendered if nothing passed
        const router = appModuleRef.injector.get(Router);

        function initializeComponent(retries = 0, maxRetries = 10) {
            let appComponentElement = document.querySelector(`wm-${wcAppName}`);
            if (appComponentElement) {
                const componentInstance = (appComponentElement as any).ngElementStrategy?.componentRef;
                const appRef = appModuleRef.injector.get(ApplicationRef);
                let pageNameConfigured = appComponentElement.getAttribute("pageName");
                pageNameConfigured = pageNameConfigured ? pageNameConfigured : "Main";
                console.log("pageNameConfigured : ", pageNameConfigured);
                router.navigate(['/'+ pageNameConfigured], { skipLocationChange: true });
                setTimeout(function() {
                    appRef.tick();
                }, 1000);
            } else if (retries < maxRetries) {
                setTimeout(function() {
                    console.log(`Retry ${retries + 1}: trying again to find the component`);
                    initializeComponent(retries + 1, maxRetries);
                }, 100);
            } else {
                console.error(`Maximum retries reached. Unable to find WebComponent wm-${wcAppName}`);
            }
        }
        let currentUrl = window.location.pathname;

        const observer = new MutationObserver((mutations) => {
            const newUrl = window.location.pathname;
            if (newUrl !== currentUrl) {
                console.log(`Detected URL change from the current url - ${currentUrl} to the new url - ${newUrl}`);
                currentUrl = newUrl;
                initializeComponent();
            }

            // Iterate over all mutations to check for image src changes
            mutations.forEach((mutation) => {
                if (mutation.type === 'attributes' && mutation.attributeName === 'src') {
                    const imgElement = mutation.target as HTMLImageElement;
                    const currentSrc = imgElement.getAttribute('src');
                    let isRelativeUrl = false;
                    if (currentSrc) {
                        try {
                            const url = new URL(currentSrc);
                            if (url.protocol === 'http:' || url.protocol === 'https:') {
                                // Skip updating if it's an absolute URL
                                return;
                            }
                        } catch (e) {
                            // If URL constructor throws, it means currentSrc is relative
                            isRelativeUrl = true;
                        }
                        if(isRelativeUrl) {
                            //@ts-ignore
                            const componentBaseUrl = WM_APPS_META[wcAppName].artifactsUrl;
                            const resolvedSrc = new URL(currentSrc, componentBaseUrl).href;

                            // Avoid re-triggering observer by temporarily disconnecting it
                            observer.disconnect();

                            imgElement.setAttribute('src', resolvedSrc);
                            // Reconnect the observer after updating the src
                            observer.observe(document.body, {
                                childList: true,
                                subtree: true,
                                attributes: true
                            });
                        }
                    }
                }
            });
        });
        // Configure the observer to watch for DOM changes
        observer.observe(document.body, {
            childList: true,
            subtree: true,
            attributes: true
        });

        initializeComponent();

        document.addEventListener('click', (event: MouseEvent) => {
            //@ts-ignore
            let target = event.target.parentNode;
            target = target as HTMLElement;
            const externalAttr = target.getAttribute('external');

            if (target.tagName === 'A' && externalAttr) {
                //event.preventDefault();
                window.parent.postMessage({ type: 'NAVIGATE', externalAttr }, '*');
            }
        });

        const applicationRef = appModuleRef.injector.get(ApplicationRef);
        window.addEventListener('unload', () => {
            applicationRef.components.map(c => c && c.destroy());
        });
        window.addEventListener('beforeunload', function() {
            observer.disconnect();
        });
        console.timeEnd('bootstrap'), err => console.log(err);
        }, err => console.log(err));
    });
