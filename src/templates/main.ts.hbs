import 'zone.js'; // Required for Angular
import 'core-js/stable'; // Polyfills for ES6+ features
import 'regenerator-runtime/runtime'; // Polyfill for async/await

import { ApplicationRef, enableProdMode, NgModuleRef, NgZone } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { Router } from '@angular/router';

import { environment } from './environments/environment';

import initWmProjectProperties from './app/wm-project-properties';
import { appConfig } from './app/app.config';
import { createApplication } from '@angular/platform-browser';
import { createCustomElement } from '@angular/elements';
import { AppComponent } from '@wm/runtime/base';
import { APP_BASE_HREF } from '@angular/common';

initWmProjectProperties();

if (environment.production) {
    enableProdMode();
}

let wcAppName = '';

let hasBootstrapped = false;
let webCompPage;
let router;
let zone;
let baseHref;

{{{mountStyles}}}

function bootstrap(appModuleRef, baseHref) {
    //default page to be rendered if nothing passed
    router = appModuleRef.injector.get(Router);

    function initializeComponent() {
        let appComponentElement = document.querySelector(`wm-${wcAppName}`);
        if (appComponentElement) {
            const componentInstance = (appComponentElement as any).ngElementStrategy?.componentRef;
            const appRef = appModuleRef.injector.get(ApplicationRef);
            let pageNameConfigured = appComponentElement.getAttribute("pageName");
            pageNameConfigured = pageNameConfigured ? pageNameConfigured : "Main";

            //renders required page on given url
            if ({{isPrefab}}) {
                router.navigate(['/'+ pageNameConfigured], { skipLocationChange: true });
            } else {
                const currentPath = window.location.pathname + window.location.search;
                const relativePath = currentPath.startsWith(baseHref)
                                        ? currentPath.slice(baseHref.length)
                                        : currentPath;

                if(!relativePath){
                    window.history.replaceState(null, '', `${baseHref}/${pageNameConfigured}`);
                    router.navigate(['/'+ pageNameConfigured]);   
                }else {
                    const decodedURL = decodeURIComponent(relativePath);
                    const [path, queryString] = decodedURL.split('?');
                    const queryParams: any = {};

                    if (queryString) {
                        queryString.split('&').forEach(pair => {
                            const [key, value] = pair.split('=');
                            queryParams[key] = value;   
                        });
                    }

                    router.navigate([path], { queryParams });
                }

                //pushState, replaceState overrided to control routing when user triggered in parent app
                function overrideHistoryMethod(methodName: 'pushState' | 'replaceState') {
                    const originalMethod = history[methodName];

                    history[methodName] = function (state) {
                        if (state?.customIntercepted) {
                            originalMethod.apply(this, arguments);
                            return;
                        }

                        const currRoute = arguments[2];

                        if (!currRoute.startsWith(baseHref)) {
                            originalMethod.apply(this, arguments);
                            return;
                        }

                        if (!webCompPage) {
                            originalMethod.apply(this, arguments);
                            return;
                        }

                        const relativePath = currRoute.slice(baseHref.length);

                        if (relativePath) {
                            const decodedURL = decodeURIComponent(relativePath);
                            const [path, queryString] = decodedURL.split('?');
                            const queryParams: any = {};

                            if (queryString) {
                                queryString.split('&').forEach(pair => {
                                    const [key, value] = pair.split('=');
                                    queryParams[key] = value;
                                });
                            }

                            zone.run(() => {
                                router.navigate([path], { queryParams });
                            });
                        } else {
                            zone.run(() => {
                                router.navigate(['/' + pageNameConfigured]);
                            });
                        }
                    };
                }

                overrideHistoryMethod('pushState');
                overrideHistoryMethod('replaceState');

                //popstate triggered when navigated back/forward
                window.addEventListener('popstate', (event)=>{
                    const currentPath = window.location.pathname + window.location.search;
                    const relativePath = currentPath.startsWith(baseHref)
                                            ? currentPath.slice(baseHref.length)
                                            : null;

                    if(relativePath){
                        const decodedURL = decodeURIComponent(relativePath);
                        const [path, queryString] = decodedURL.split('?');
                        const queryParams: any = {};

                        if (queryString) {
                            queryString.split('&').forEach(pair => {
                                const [key, value] = pair.split('=');
                                queryParams[decodeURIComponent(key)] = decodeURIComponent(value);  
                            });
                        }
                    
                        router.navigate([path], { queryParams });
                    }
                });            
            }

            setTimeout(function() {
                appRef.tick();
            }, 1000);
        }
    }

    initializeComponent();

    document.addEventListener('click', (event: MouseEvent) => {
        //@ts-ignore
        let target = event.target.parentNode;
        target = target as HTMLElement;
        const externalAttr = target.getAttribute('external');

        if (target.tagName === 'A' && externalAttr) {
            //event.preventDefault();
            window.parent.postMessage({ type: 'NAVIGATE', externalAttr }, '*');
        }
    });

    const applicationRef = appModuleRef.injector.get(ApplicationRef);
    window.addEventListener('unload', () => {
        applicationRef.components.map(c => c && c.destroy());
    });
    window.addEventListener('beforeunload', function() {
        observer.disconnect();
    });
    console.timeEnd('bootstrap')
}

function loadBootstrap(){
    if (hasBootstrapped) {
        return;
    }

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            bootstrapWebComponent();
        });
    } else {
        //For lazily loaded cases. DOM is already loaded, bootstrap immediately.
        bootstrapWebComponent();
    }
}

function bootstrapWebComponent() {
    if (hasBootstrapped) {
        return;
    }

    hasBootstrapped = true;
    webCompPage = true;
    
    console.log("-----------bootstraping webcomponent-------------");
    {{{webComponents}}}
}
