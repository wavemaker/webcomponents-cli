import 'zone.js'; // Required for Angular
import 'core-js/stable'; // Polyfills for ES6+ features
import 'regenerator-runtime/runtime'; // Polyfill for async/await

import { ApplicationRef, enableProdMode, NgModuleRef, NgZone } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { DefaultUrlSerializer, Router } from '@angular/router';

import { environment } from './environments/environment';

import initWmProjectProperties from './app/wm-project-properties';
import { appConfig } from './app/app.config';
import { createApplication } from '@angular/platform-browser';
import { createCustomElement } from '@angular/elements';
import { AppComponent } from '@wm/runtime/base';
import { APP_BASE_HREF } from '@angular/common';

initWmProjectProperties();

if (environment.production) {
    enableProdMode();
}

let wcAppName = '';

let hasBootstrapped = false;
let webCompPage;
let router;
let zone;
let baseHref;
const defaultUrlSerializer = new DefaultUrlSerializer();

{{{mountStyles}}}

function bootstrap(appModuleRef, baseHref) {
    //default page to be rendered if nothing passed
    router = appModuleRef.injector.get(Router);

    function initializeComponent() {
        let appComponentElement = document.querySelector(`wm-${wcAppName}`);
        if (appComponentElement) {
            const componentInstance = (appComponentElement as any).ngElementStrategy?.componentRef;
            const appRef = appModuleRef.injector.get(ApplicationRef);
            let pageNameConfigured = appComponentElement.getAttribute("pageName");
            pageNameConfigured = pageNameConfigured ? pageNameConfigured : "Main";

            //renders required page on given url
            if ({{isPrefab}}) {
                router.navigate(['/'+ pageNameConfigured], { skipLocationChange: true });
            } else {
                const currentPath = window.location.pathname + window.location.search;
                const relativePath = currentPath.startsWith(baseHref)
                                        ? currentPath.slice(baseHref.length)
                                        : currentPath;

                if(!relativePath){
                    window.history.replaceState(null, '', `${baseHref}/${pageNameConfigured}`);
                    router.navigate(['/'+ pageNameConfigured]);   
                }else {
                    const serializedURL = defaultUrlSerializer.serialize(router.parseUrl(relativePath));
                    router.navigateByUrl(serializedURL);
                }

                /**
                 * Monkey Patched pushState, replaceSate functions to detect url changes 
                 * when user triggers from parent app this checks if the route
                 * passed from interceptor, if not it makes a new request
                 */
                function overrideHistoryMethod(methodName: 'pushState' | 'replaceState') {
                    const originalMethod = history[methodName];

                    history[methodName] = function (state) {
                        const currRoute = arguments[2];
                        if (state?.customIntercepted) {
                            /**
                             * on removing hashing in route, url will be encoded
                             * by default angular retuns decoded route, which on compared with browser url
                             * triggers pushState instead of replaceState
                             * for this browser url is serialized for comparing with the route
                             */
                            let urlTree = router.parseUrl(window.location.pathname + window.location.search);
                            let currentURL = defaultUrlSerializer.serialize(urlTree);

                            if( currRoute === currentURL ){
                                return;
                            }
                            originalMethod.apply(this, arguments);
                            return;
                        }

                        if (!currRoute.startsWith(baseHref)) {
                            originalMethod.apply(this, arguments);
                            return;
                        }

                        if (!webCompPage) {
                            originalMethod.apply(this, arguments);
                            return;
                        }

                        const relativePath = currRoute.slice(baseHref.length);

                        if (relativePath) {
                            const serializedURL = defaultUrlSerializer.serialize(router.parseUrl(relativePath));

                            zone.run(() => {
                                router.navigateByUrl(serializedURL);
                            });
                        } else {
                            zone.run(() => {
                                router.navigate(['/' + pageNameConfigured]);
                            });
                        }
                    };
                }

                overrideHistoryMethod('pushState');
                overrideHistoryMethod('replaceState');

                //popstate triggered when navigated back/forward
                window.addEventListener('popstate', (event)=>{
                    const currentPath = window.location.pathname + window.location.search;
                    const relativePath = currentPath.startsWith(baseHref)
                                            ? currentPath.slice(baseHref.length)
                                            : null;

                    if(relativePath){
                        const serializedURL = defaultUrlSerializer.serialize(router.parseUrl(relativePath));
                        router.navigateByUrl(serializedURL);
                    }
                });            
            }

            setTimeout(function() {
                appRef.tick();
            }, 1000);
        }
    }

    initializeComponent();

    document.addEventListener('click', (event: MouseEvent) => {
        //@ts-ignore
        let target = event.target.parentNode;
        target = target as HTMLElement;
        const externalAttr = target.getAttribute('external');

        if (target.tagName === 'A' && externalAttr) {
            //event.preventDefault();
            window.parent.postMessage({ type: 'NAVIGATE', externalAttr }, '*');
        }
    });

    const applicationRef = appModuleRef.injector.get(ApplicationRef);
    window.addEventListener('unload', () => {
        applicationRef.components.map(c => c && c.destroy());
    });
    window.addEventListener('beforeunload', function() {
        observer.disconnect();
    });
    console.timeEnd('bootstrap')
}

function loadBootstrap(){
    if (hasBootstrapped) {
        return;
    }

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            bootstrapWebComponent();
        });
    } else {
        //For lazily loaded cases. DOM is already loaded, bootstrap immediately.
        bootstrapWebComponent();
    }
}

function bootstrapWebComponent() {
    if (hasBootstrapped) {
        return;
    }

    hasBootstrapped = true;
    webCompPage = true;
    
    console.log("-----------bootstraping webcomponent-------------");
    {{{webComponents}}}
}
