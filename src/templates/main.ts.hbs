import 'zone.js'; // Required for Angular
import 'core-js/stable'; // Polyfills for ES6+ features
import 'regenerator-runtime/runtime'; // Polyfill for async/await

import { ApplicationRef, enableProdMode, NgModuleRef } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { Router } from '@angular/router';

import { AppModule } from './app/app.module';
import { environment } from './environments/environment';

import initWmProjectProperties from './app/wm-project-properties';
import { APP_BASE_HREF } from '@angular/common';

initWmProjectProperties();

if (environment.production) {
    enableProdMode();
}

let wcAppName = '';

let hasBootstrapped = false;

{{{mountStyles}}}

function bootstrap(appModuleRef, baseHref) {
    //default page to be rendered if nothing passed
    const router = appModuleRef.injector.get(Router);

    function initializeComponent() {
        let appComponentElement = document.querySelector(`wm-${wcAppName}`);
        if (appComponentElement) {
            const componentInstance = (appComponentElement as any).ngElementStrategy?.componentRef;
            const appRef = appModuleRef.injector.get(ApplicationRef);
            let pageNameConfigured = appComponentElement.getAttribute("pageName");
            pageNameConfigured = pageNameConfigured ? pageNameConfigured : "Main";

            if({{isPrefab}}){
                router.navigate(['/'+ pageNameConfigured], { skipLocationChange: true });
            } else {
                console.log("-----------baseHref-----------", baseHref);
                const currentPath = window.location.pathname + window.location.search;
                console.log("currentPath", currentPath);
                const relativePath = currentPath.startsWith(baseHref)
                                        ? currentPath.slice(baseHref.length)
                                        : currentPath;

                console.log("relativePath",relativePath);

                if(!relativePath){
                    router.navigate(['/'+ pageNameConfigured]);
                    
                }else{
                    const [path, queryString] = relativePath.split('?');

                    const queryParams: any = {};

                    if (queryString) {
                        queryString.split('&').forEach(pair => {
                        const [key, value] = pair.split('=');
                        queryParams[key] = value;
                        });
                    }

                    router.navigate([path], { queryParams });
                }
            }

            setTimeout(function() {
                appRef.tick();
            }, 1000);
        }
    }

    initializeComponent();

    document.addEventListener('click', (event: MouseEvent) => {
        //@ts-ignore
        let target = event.target.parentNode;
        target = target as HTMLElement;
        const externalAttr = target.getAttribute('external');

        if (target.tagName === 'A' && externalAttr) {
            //event.preventDefault();
            window.parent.postMessage({ type: 'NAVIGATE', externalAttr }, '*');
        }
    });

    const applicationRef = appModuleRef.injector.get(ApplicationRef);
    window.addEventListener('unload', () => {
        applicationRef.components.map(c => c && c.destroy());
    });
    window.addEventListener('beforeunload', function() {
        observer.disconnect();
    });
    console.timeEnd('bootstrap')
}

function loadBootstrap(){
    if (hasBootstrapped) {
        return;
    }

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            bootstrapWebComponent();
        });
    } else {
        //For lazily loaded cases. DOM is already loaded, bootstrap immediately.
        bootstrapWebComponent();
    }
}

function bootstrapWebComponent() {
    if (hasBootstrapped) {
        return;
    }

    hasBootstrapped = true;

    platformBrowserDynamic().bootstrapModule(AppModule).then((appModuleRef: NgModuleRef<AppModule>) => {
        const injector = appModuleRef.injector;
        const baseHref = injector.get(APP_BASE_HREF);
        bootstrap(appModuleRef, baseHref);
    }).catch(err => {
        console.error("Error bootstrapping application:", err);
    });
}
