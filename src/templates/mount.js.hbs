
let currentUrl = window.location.pathname;

const observedElements = new Set<Element>();

const observer = new MutationObserver((mutations) => {
    let urlChanged = false;
    const newUrl = window.location.pathname;

    mutations.forEach((mutation) => {
        // Check if URL has changed
        if (newUrl !== currentUrl && !urlChanged) {
            console.log(`Detected URL change from ${currentUrl} to ${newUrl}`);
            currentUrl = newUrl;
            urlChanged = true;
            initializeApp("{{appName}}");
        }

        if({{isWebApp}}){
            if (mutation.type === 'attributes' && mutation.attributeName === 'src') {
                const imgElement = mutation.target ;
                //@ts-ignore
                let currentSrc = imgElement.getAttribute('src');
                let isRelativeUrl = false;
                if (currentSrc) {
                    try {
                        const url = new URL(currentSrc);
                        if (url.protocol === 'http:' || url.protocol === 'https:') {
                            // Skip updating if it's an absolute URL
                            return;
                        }
                    } catch (e) {
                        // If URL constructor throws, it means currentSrc is relative
                        isRelativeUrl = true;
                    }
                    if(isRelativeUrl) {
                        //@ts-ignore
                        const componentBaseUrl = !currentSrc.startsWith("services") ? WM_APPS_META[wcAppName].artifactsUrl : WM_APPS_META[wcAppName].apiUrl;
                        currentSrc = currentSrc.replace("app/prefabs/", 'resources/');
                        const resolvedSrc = new URL(currentSrc, componentBaseUrl).href;

                        // Avoid re-triggering observer by temporarily disconnecting it
                        observer.disconnect();
                        //@ts-ignore
                        imgElement.setAttribute('src', resolvedSrc);
                        // Reconnect the observer after updating the src
                        observer.observe(document.body, {
                            childList: true,
                            subtree: true,
                            attributes: true
                        });
                    }
                }
            }
        }

        mutation.addedNodes.forEach((node) => {
            if (node.nodeType === Node.ELEMENT_NODE) {
                const element = node as HTMLElement;

                if (element.tagName.toLowerCase() === 'wm-{{appName}}' && !observedElements.has(element)) {
                    observedElements.add(element);
                    initializeApp("{{appName}}");
                }
            }
        });
    });
});

observer.observe(document.body, {
    childList: true,
    subtree: true,
    attributes: true
});


function initializeApp(appName, retries = 0, maxRetries = 10) {
    wcAppName = appName;

    const appComponentElement = document.querySelector(`wm-${wcAppName}`);
    if(appComponentElement){
        try {
            if(!appComponentElement) {
                console.error(`"The wm-${wcAppName} WebComponent element is not available in the DOM at the time of script loading`);
            }
            appComponentElement.classList.add('wm-app');

            /**
             * when user navigates from webcomponent page to non-webcomponent page
             * and then returns to webcomponent page, new route request is called
             */
            if(!webCompPage && hasBootstrapped && {{isWebApp}}){
                let pageNameConfigured = appComponentElement.getAttribute("pageName");
                pageNameConfigured = pageNameConfigured ? pageNameConfigured : "Main";
                
                const currentPath = window.location.pathname + window.location.search;
                const relativePath = currentPath.startsWith(baseHref)
                                        ? currentPath.slice(baseHref.length)
                                        : currentPath;

                if(!relativePath){
                    window.history.replaceState(null, '', `${baseHref}/${pageNameConfigured}`);
                    router.navigate(['/'+ pageNameConfigured]);   
                }else {
                    const serializedURL = defaultUrlSerializer.serialize(router.parseUrl(relativePath));
                    router.navigateByUrl(serializedURL);
                }

                webCompPage = true;
            }

            loadBootstrap();
        } catch(error) {
            console.log("Something went wrong", error)
        }
    } else if (retries < maxRetries) {
        setTimeout(function() {
            console.log(`Retry ${retries + 1}: trying again to find the component`);
            initializeApp("{{appName}}",retries + 1, maxRetries);
        }, 100);
    } else {
        console.log(`Maximum retries reached. Unable to find WebComponent wm-${wcAppName}`);
        webCompPage = false;
        return;
    }
}

initializeApp("{{appName}}")
