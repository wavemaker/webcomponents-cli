(function(appName) {
    wcAppName = appName;

    (function(appComponentElement){
        const wmAppClassElement = document.createElement('div');
        wmAppClassElement.classList.add('wm-app');
        appComponentElement.parentNode.insertBefore(wmAppClassElement, appComponentElement);
        wmAppClassElement.appendChild(appComponentElement);
    })(document.querySelector(`wm-${wcAppName}`))


const mountStyle = (styleSheetUrl) => {
        var head  = document.getElementsByTagName('head')[0];
        var link  = document.createElement('link');
        link.rel  = 'stylesheet';
        link.type = 'text/css';
        link.href = styleSheetUrl;
        link.media = 'all';
        head.appendChild(link);
    }

    const mountStyles = () => {
        function getRuntimeUrl(aName: string): string {
            const scriptSelector = `script[src*="wm-${aName}.js"]`;
            // Find the script tag that loads our web component
            const scriptElement = document.querySelector(scriptSelector) as HTMLScriptElement;

            if (scriptElement) {
                const scriptSrc = scriptElement.src;

                // Check if the URL is relative
                if (!/^(http:|https:|\/\/)/i.test(scriptSrc)) {
                    // Resolve the relative URL using the document's location
                    const parentUrl = window.location.href;
                    const parentBasePath = parentUrl.substring(0, parentUrl.lastIndexOf('/') + 1);
                    return new URL(scriptSrc, parentBasePath).href;
                }

                // If the URL is absolute, extract the base path
                const basePath = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);
                return basePath;
            }
            // Fallback path if the script element is not found
            return '/ng-bundle/';
        }
        //@ts-ignore
        WM_APPS_META[appName].artifactsUrl = getRuntimeUrl(appName);

        let styles= ["wm-styles.css", "styles.css"];
        styles.map(function(stylesheet) {
            //@ts-ignore
            let artifactsUrl = WM_APPS_META[appName].artifactsUrl;
            artifactsUrl = (artifactsUrl.slice(-1) === "/" ? artifactsUrl.slice(0, -1) : artifactsUrl)
            mountStyle(artifactsUrl + '/' + stylesheet);
        });
    }

    mountStyles();
})("{{appName}}")